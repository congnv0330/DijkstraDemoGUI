<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rtxbCode.Text" xml:space="preserve">
    <value>//https://github.com/nanikko/Dijkstra-using-Fibonnaci-Heaps/blob/master/dijikstra.cpp

#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;list&gt;
#include &lt;climits&gt;
#include &lt;stdio.h&gt;
#include &lt;memory&gt;
#include &lt;cmath&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;vector&gt;
using namespace std;

vector&lt;int&gt; *shortest_order;
int *distance_to_dest;
int num_vertices;

/** Node structure in a Graph. Instead, we are simplifying by representing each node by its index (int) */
struct node {
	int index;
};

/** Structure for each element in a Graph's adjacency list*/
struct adj_node {
	int dest_node; //Index of the node to which the current node is connected to.
	int edge_len; //Edge weight.
};

/** Adjacency list representation of the graph. We use a Hash Table to map each vertex to its
	adjacent nodes
*/
struct graph {
	int num_vertices; //Number of vertices in the graph. This is provided as an input from the user.
	map&lt;int, list&lt;adj_node*&gt; &gt; adjacent_list_map; //Map for each vertex.
};

/** node structure for a node in fibonacci heap */
struct fibonacci_node {
	int degree;                 //Number of children for this node.
	fibonacci_node *parent;     //Parent pointer.
	fibonacci_node *child;      //Pointer to the first child of a node.
	fibonacci_node *left;       //Pointer to the left sibling.
	fibonacci_node *right;      //Pointer to the right sibling.
	bool mark;                  //Whether the node is marked. Used for cascading cut operation.
	bool is_infinity;
	int key;                    // This corresponds to the distance from the source node.
	int node_index;             //Pointer to the node. Simplifying, we use an int-index to represent each node.
};

/** This is the fibonacci heap data structure which has min pointer
	of type fibonacci node and total nodes in the heap*/
struct fibonacci_heap {
	fibonacci_node *min_node;
	int num_nodes;
	fibonacci_heap()
	{
		num_nodes = 0;
		min_node = NULL;
	}
};

int get_min_distant_unmarked_node(graph* graph_obj, int *distance_to_dest,
	bool *marked);

/** This function inserts a new node into the fibonacci heap. Depending on the key mentioned,
	heap min pointer is changed appropriately and degree incremented by one.
*/
void fib_heap_insert(fibonacci_heap *fib_heap_obj, fibonacci_node *new_node,
	int key) {

	fibonacci_node *min_node = fib_heap_obj-&gt;min_node;
	new_node-&gt;key = key;
	new_node-&gt;degree = 0;
	new_node-&gt;parent = NULL;
	new_node-&gt;child = NULL;
	new_node-&gt;left = new_node;
	new_node-&gt;right = new_node;
	new_node-&gt;mark = false;
	new_node-&gt;is_infinity = false;
	//Concatenating the root list containing new_node with root list of the heap. We place the new node next to the min node in case it is not NULL.
	if (min_node != NULL) {
		fibonacci_node* min_left_temp = min_node-&gt;left;
		min_node-&gt;left = new_node;
		new_node-&gt;right = min_node;
		new_node-&gt;left = min_left_temp;
		min_left_temp-&gt;right = new_node;
	}

	//Updating the min pointer.
	if (min_node == NULL || min_node-&gt;key &gt; new_node-&gt;key) {
		fib_heap_obj-&gt;min_node = new_node;
	}

	fib_heap_obj-&gt;num_nodes = fib_heap_obj-&gt;num_nodes + 1;
}

/** This function deals with adding truncated nodes to the root list.
	mark value of the node is set to FALSE as it is equivalent to the node being insert first time. */
void fib_heap_existing_to_root(fibonacci_heap *fib_heap_obj,
	fibonacci_node *new_node) {

	fibonacci_node *min_node = fib_heap_obj-&gt;min_node;
	new_node-&gt;parent = NULL; //Updating the parent pointer to null.
	new_node-&gt;mark = false;   //Setting the mark value of the node to false.

	/*Concatenating the root list containing new_node with root list of the heap.
	We place the new node to the left of the min node in case it is not NULL.*/
	if (min_node != NULL) {
		fibonacci_node* min_left_temp = min_node-&gt;left;
		min_node-&gt;left = new_node;
		new_node-&gt;right = min_node;
		new_node-&gt;left = min_left_temp;
		min_left_temp-&gt;right = new_node;

		if (min_node-&gt;key &gt; new_node-&gt;key) {
			fib_heap_obj-&gt;min_node = new_node;
		}
	}
	else { //Case when there are no nodes in the root list already existing.
		fib_heap_obj-&gt;min_node = new_node;
		new_node-&gt;right = new_node;
		new_node-&gt;left = new_node;
	}
}

/** This function creates an empty heap and initializes its elements
	It is used only when we are creating a new f-heap */
fibonacci_heap *fib_heap_make() {

	fibonacci_heap *new_fib_heap = new fibonacci_heap;
	new_fib_heap-&gt;num_nodes = 0;
	new_fib_heap-&gt;min_node = NULL;
	return new_fib_heap;

}

/** This function combines two fibonacci heaps. This function isn't required for Dijkstra implementation.*/
fibonacci_heap *fib_heap_union(fibonacci_heap *fib_heap_first,
	fibonacci_heap *fib_heap_second) {

	fibonacci_heap *appended_fib_heap = fib_heap_make();
	fibonacci_node *first_heap_min_node = fib_heap_first-&gt;min_node;
	fibonacci_node *second_heap_min_node = fib_heap_second-&gt;min_node;

	if (fib_heap_second-&gt;min_node == NULL) {
		appended_fib_heap-&gt;min_node = first_heap_min_node;
	}
	else if (fib_heap_first-&gt;min_node == NULL) {
		appended_fib_heap-&gt;min_node = second_heap_min_node;
	}
	else { //When both are not NULL
	 //Concatenating the root list of H2 with the root list of H
		fibonacci_node *first_heap_min_node_left_temp =
			first_heap_min_node-&gt;left;
		fibonacci_node *second_heap_min_node_left_temp =
			second_heap_min_node-&gt;left;
		first_heap_min_node-&gt;left = second_heap_min_node_left_temp;
		second_heap_min_node-&gt;left = first_heap_min_node_left_temp;
		first_heap_min_node_left_temp-&gt;right = second_heap_min_node;
		second_heap_min_node_left_temp-&gt;right = first_heap_min_node;

		if (second_heap_min_node-&gt;key &lt; first_heap_min_node-&gt;key) {
			appended_fib_heap-&gt;min_node = second_heap_min_node;
		}
		else {
			appended_fib_heap-&gt;min_node = first_heap_min_node;
		}
	}

	appended_fib_heap-&gt;num_nodes = fib_heap_first-&gt;num_nodes
		+ fib_heap_second-&gt;num_nodes;
	return appended_fib_heap;
}

/** This function adds the new_child_node to the parent_node child list. Degree of the parent in incremented
	by one as well to reflect to the node*/
void fib_heap_add_child(fibonacci_node *parent_node,
	fibonacci_node *new_child_node) {

	if (parent_node-&gt;degree == 0) {
		parent_node-&gt;child = new_child_node;
		new_child_node-&gt;right = new_child_node;
		new_child_node-&gt;left = new_child_node;
		new_child_node-&gt;parent = parent_node;
	}
	else {
		fibonacci_node* first_child = parent_node-&gt;child;
		fibonacci_node* first_child_left_temp = first_child-&gt;left;
		first_child-&gt;left = new_child_node;
		new_child_node-&gt;right = first_child;
		new_child_node-&gt;left = first_child_left_temp;
		first_child_left_temp-&gt;right = new_child_node;
	}
	new_child_node-&gt;parent = parent_node;
	parent_node-&gt;degree = parent_node-&gt;degree + 1;
}

/** This function is used to truncate a child node from a sibling list. It could be a root list as well. */
void fib_heap_remove_node_from_root(fibonacci_node *node) {

	//if chld has siblings,then remove it from sibling list by traversing
	if (node-&gt;right != node) {
		node-&gt;right-&gt;left = node-&gt;left;
		node-&gt;left-&gt;right = node-&gt;right;
	}

	/*if the node being removed is the child node of parent, we have to set
	 some other sibling of child as child for parent.*/
	if (node-&gt;parent != NULL) {
		int parent_degree = node-&gt;parent-&gt;degree;
		if (parent_degree == 1) {
			// if its the only child then parent has no more children. so set to null.
			node-&gt;parent-&gt;child = NULL;
		}
		else {
			node-&gt;parent-&gt;child = node-&gt;right;
		}
		//Parent's degree is updated from truncating the child node.
		node-&gt;parent-&gt;degree = node-&gt;parent-&gt;degree - 1;
	}
}

/** This function links two nodes as part of the consolidation operation.
	First the larger node is sliced from its sibling list and is then
	added as a child to the smaller node
	*/
void fib_heap_link(fibonacci_heap *heap_inst, fibonacci_node *high_node,
	fibonacci_node *low_node) {

	fib_heap_remove_node_from_root(high_node);
	fib_heap_add_child(low_node, high_node);
	//mark value of the larger node is marked false.
	high_node-&gt;mark = false;

}

/** This method is the crucial method for fibonacci heaps where all the actual time
	is spent in pairwise merging of all the trees, to ensure at the end of the operation
	there are no two trees with the same degree.
	we scan the root list with the help of min pointer in the heap and combine trees with
	same degree into a single tree. We do this with the help of a auxillary table to see if
	there is a tree with degree already existing in our heap.
*/
void fib_heap_consolidate(fibonacci_heap *heap_inst) {

	int node_degree;
	int count = 0, root_count = 0; //root_count is used to count the number of nodes in the root list.

	if (heap_inst-&gt;num_nodes &gt; 1) { //When the number of nodes is less then 1, consolidate makes no sense.
		int degree_table_size = heap_inst-&gt;num_nodes;
		vector&lt;fibonacci_node*&gt; degree_table; //This is the table via which the degrees are compared for consolidation.
		fibonacci_node *current_node = heap_inst-&gt;min_node, *start_node =
			heap_inst-&gt;min_node;
		fibonacci_node *existing_node_degree_array, *current_consolidating_node;

		fibonacci_node *temp_node = heap_inst-&gt;min_node, *iterating_node =
			heap_inst-&gt;min_node;
		//Calculating the number of nodes in the root list.
		do {
			root_count++;
			iterating_node = iterating_node-&gt;right;
		} while (iterating_node != temp_node);

		while (count &lt; root_count) {
			current_consolidating_node = current_node;
			current_node = current_node-&gt;right; // This actually means node for next iternation.
			node_degree = current_consolidating_node-&gt;degree;
			while (true) { //We traverse the table each time until all same degree nodes are merged.
				while (node_degree &gt;= degree_table.size()) {
					degree_table.push_back(NULL); //This is a way by which we avoid segmentation fault for accessing a index in the degree table.
				}
				if (degree_table[node_degree] == NULL) { //Adding the current node to the degree table since empty.
					degree_table[node_degree] = current_consolidating_node;
					break;
				}
				else {//When there is already a node existing with the same degree
					existing_node_degree_array = degree_table[node_degree];

					if (current_consolidating_node-&gt;key
		&gt; existing_node_degree_array-&gt;key) {

						//swapping the nodes.
						fibonacci_node * temp_node = current_consolidating_node;
						current_consolidating_node = existing_node_degree_array;
						existing_node_degree_array = temp_node;
					}
					if (existing_node_degree_array
						== current_consolidating_node)break;
					//Linking the larger of the nodes to the smaller one.
					fib_heap_link(heap_inst, existing_node_degree_array,
						current_consolidating_node);
					//Making the current degree index as null as it is incremented now.
					degree_table[node_degree] = NULL;
					node_degree++;
				}
			}
			count++;
		}

		//Adding the different degree nodes back to the root list.
		heap_inst-&gt;min_node = NULL;
		for (int i = 0; i &lt; degree_table.size(); i++) {
			if (degree_table[i] != NULL) {
				fib_heap_existing_to_root(heap_inst, degree_table[i]);
			}
		}
	}
}

/** This function extracts the minimum value from the heap based on the min_node pointer that
	each heap structure maintains. In order to verify the correctness of the fibonacci implementation
	with the array one, I am writing out each extracted min node to a file for making the comparision
	easier.
*/
fibonacci_node *fib_heap_extract_min(fibonacci_heap *heap_inst) {

	fibonacci_node *min_node = heap_inst-&gt;min_node;
	ofstream myfile;
	myfile.open("order_fib.txt", std::ios_base::app);

	//Writing out the minimum node to the file.
	myfile &lt;&lt; "FIB -- MIN NODE " &lt;&lt; min_node-&gt;node_index &lt;&lt; endl;

	if (min_node != NULL) {
		//Add each child in the extracted node to the root list.
		int degree = min_node-&gt;degree;
		fibonacci_node *current_child = min_node-&gt;child;
		fibonacci_node *removed_child;
		int count = 0; //Count for the children being added to the root list.

		//Iterate till all the children nodes are added to the root list.
		while (count &lt; degree) {
			removed_child = current_child;
			current_child = current_child-&gt;right;
			fib_heap_existing_to_root(heap_inst, removed_child);
			count++;
		}

		//Removing the extracted node from the root list.
		fib_heap_remove_node_from_root(min_node);
		//Decrementing the number of nodes as a node has been removed.
		heap_inst-&gt;num_nodes = heap_inst-&gt;num_nodes - 1;
		if (heap_inst-&gt;num_nodes == 0) { //only one node at the root level.
			heap_inst-&gt;min_node = NULL;
		}
		else { //More than one node at the root level.
			heap_inst-&gt;min_node = min_node-&gt;right; //It may not be the real min node.
			//Removing from the root list.
			fibonacci_node *min_node_left_temp = min_node-&gt;left;
			heap_inst-&gt;min_node-&gt;left = min_node_left_temp;
			min_node_left_temp-&gt;right = heap_inst-&gt;min_node;
			//Once
			fib_heap_consolidate(heap_inst);
		}
	}
	return min_node;
}

/** This method removes the child node from its parent in the heap.*/
void fib_heap_cut(fibonacci_heap *heap_inst, fibonacci_node *node,
	fibonacci_node *node_parent) {

	fib_heap_remove_node_from_root(node);
	fib_heap_existing_to_root(heap_inst, node);

}

/** This recursive function removes the nodes from heap if the child mark
	values are true. It goes from child to parent until it sees a parent
	whose child mark value is false. It sets the child mark of last parent
	as true since it just lost a child.*/
void fib_heap_cascading_cut(fibonacci_heap *heap_inst, fibonacci_node *node) {

	fibonacci_node *parent_node = node-&gt;parent;
	if (parent_node != NULL) {
		// case when parent is having child mark false
		if (node-&gt;mark == false) {
			node-&gt;mark = true;
		}
		else {
			// remove this node and recurse up the path until mark is false
			fib_heap_cut(heap_inst, node, parent_node);
			fib_heap_cascading_cut(heap_inst, parent_node);
		}
	}

}

/** This method sets the key field of node to amount specified as argument.
	Based on the new value it may be removed from the parent and called for
	cut and cascade methods.*/
void fib_heap_decrease_key(fibonacci_heap *heap_inst, fibonacci_node *node_inst,
	int new_key) {

	int old_key = node_inst-&gt;key;

	if (new_key &gt; old_key) {
		return;
	}

	node_inst-&gt;key = new_key;
	if (node_inst-&gt;parent != NULL) {
		/*  new weight is less than parent weight, so it must be cut
			from the parent*/
		if (node_inst-&gt;key &lt; node_inst-&gt;parent-&gt;key) {
			fibonacci_node *parent_node = node_inst-&gt;parent;
			fib_heap_cut(heap_inst, node_inst, node_inst-&gt;parent);
			fib_heap_cascading_cut(heap_inst, parent_node);
		}
	}

	//Updating the heap's min pointer appropriately.
	if (node_inst-&gt;key &lt; heap_inst-&gt;min_node-&gt;key) {
		heap_inst-&gt;min_node = node_inst;
	}

}

/** This function can be used to delete a key from the heap. This is
	achieved by decreasing the key value to the minimum value available
	in the data type being used. This function is not in use for our current
	implementation.
	*/
void fib_heap_delete(fibonacci_heap *heap_inst, fibonacci_node *node) {
	fib_heap_decrease_key(heap_inst, node, INT_MIN);
	fib_heap_extract_min(heap_inst);
}

/** This function creates a graph with the number of vertices specified by
	the user.*/
graph* create_graph(int graph_size) {
	graph *graph_inst = new graph;
	graph_inst-&gt;num_vertices = graph_size;
	return graph_inst;
}

/**Adds an edge to an undirected graph*/
void add_edge(graph* graph_obj, int src, int dest, int edge_len) {
	// Add an edge from src to dest.  A new node is added to the adjacency
	// list of src.  The node is added at the end of the list.
	adj_node *new_node = new adj_node;
	new_node-&gt;dest_node = dest;
	new_node-&gt;edge_len = edge_len;
	graph_obj-&gt;adjacent_list_map[src].push_back(new_node);

	// Since graph is undirected, add an edge from dest to src also
	adj_node* new_node_2 = new adj_node;
	new_node_2-&gt;dest_node = src;
	new_node_2-&gt;edge_len = edge_len;
	graph_obj-&gt;adjacent_list_map[dest].push_back(new_node_2);
}

/**A utility function to print the adjacenncy list representation of graph*/
void print_graph(graph* graph_obj) {
	for (int vertex = 0; vertex &lt; graph_obj-&gt;num_vertices; ++vertex) {
		list&lt;adj_node*&gt; adj_list_for_node = graph_obj-&gt;adjacent_list_map[vertex];
		for (list&lt;adj_node*&gt;::iterator it = adj_list_for_node.begin();
			it != adj_list_for_node.end(); ++it) {
			cout &lt;&lt; "  " &lt;&lt; (*it)-&gt;dest_node &lt;&lt; ":" &lt;&lt; (*it)-&gt;edge_len;
		}
		cout &lt;&lt; endl;
	}
}

/** This function implements the Dijkstra algorithm using the routine array way for calculating
	the next minimum distant vertex from the source node.*/
void dijkstra_normal(graph* graph_instance, int src) {
	//Setting the start time.
	clock_t Time, Start = clock();
	int count_marked = 0;
	//Maintaining the distance from the source for each of the destination nodes.
	distance_to_dest = new int[graph_instance-&gt;num_vertices];
	bool *marked = new bool[graph_instance-&gt;num_vertices];
	//Distances initialized to INT_MAX or infinity.
	for (int i = 0; i &lt; graph_instance-&gt;num_vertices; i++) {
		distance_to_dest[i] = INT_MAX;
	}
	//PS:This marked variable is different fromt he fibonnaci mark value. This denotes
	//whether the node has already reached min distance.
	for (int i = 0; i &lt; graph_instance-&gt;num_vertices; i++) {
		marked[i] = false;
	}

	distance_to_dest[src] = 0; //distance to the source to make equal to zero.
	while (count_marked &lt; graph_instance-&gt;num_vertices) { // Add each min distant node in each iteration.
		get_min_distant_unmarked_node(graph_instance, distance_to_dest, marked);
		count_marked++;
	}

	//Total execution time.
	Time = clock() - Start;
	//Printing out the output to a file for better comparision with fibonacci.
	ofstream myfile;
	myfile.open("output_normal.txt", std::fstream::out | std::fstream::trunc);

	for (int i = 0; i &lt; graph_instance-&gt;num_vertices; i++) {
		myfile &lt;&lt; i &lt;&lt; " : " &lt;&lt; distance_to_dest[i] &lt;&lt; endl;
	}

	cout &lt;&lt; "\nTotal execution time using Simple Scheme : "
		&lt;&lt; (double)Time / CLOCKS_PER_SEC &lt;&lt; " secs\n";
	myfile.close();
}

/** This function calculates the minimum distant node using the fibonacci heap.*/
int get_min_distant_unmarked_node_fib_heap(graph* graph_obj,
	fibonacci_heap *heap, fibonacci_node **node_array, bool *marked);

/** This function implements the Dijkstra algorithm using the fibonacci heap. Source vertex
	is specified by the user as input.*/
void dijkstra_fibanocci(graph* graph_instance, int src) {
	//Starting the clock.
	clock_t Start, Time;
	Start = clock();
	int count_marked = 0;
	//List of all fibonacci node pointers to each of the vertices.
	fibonacci_node **node_array =
		new fibonacci_node*[graph_instance-&gt;num_vertices];
	//This is a boolean variable denoting is the destination vertex has reached minimum distant value.
	bool *marked = new bool[graph_instance-&gt;num_vertices];
	fibonacci_heap *heap_inst = new fibonacci_heap;
	//First, we insert all the vertices into the fibonacci heap with their weights being maximum except for the source node.
	for (int i = 0; i &lt; graph_instance-&gt;num_vertices; i++) {
		marked[i] = false;
		node_array[i] = new fibonacci_node;
		if (i == src) {
			fib_heap_insert(heap_inst, node_array[i], 0);
		}
		else {
			fib_heap_insert(heap_inst, node_array[i], INT_MAX);
		}
		node_array[i]-&gt;node_index = i;
	}

	while (count_marked &lt; graph_instance-&gt;num_vertices) { // Add each min distant node in each iteration.
		get_min_distant_unmarked_node_fib_heap(graph_instance, heap_inst,
			node_array, marked);
		count_marked++;
	}
	//Calculating the execution time and writing out the output to a file.
	Time = clock() - Start;
	ofstream myfile;
	myfile.open("output.txt", std::fstream::out | std::fstream::trunc);

	for (int i = 0; i &lt; graph_instance-&gt;num_vertices; i++) {
		myfile &lt;&lt; i &lt;&lt; " : " &lt;&lt; node_array[i]-&gt;key &lt;&lt; "\n";
	}
	cout &lt;&lt; "Total execution time using Fibonacci Heap : "
		&lt;&lt; (double)Time / (double)CLOCKS_PER_SEC &lt;&lt; " secs\n";
	myfile.close();
}

/** This function calculates the min distant unmarked node using the normal array implementation.
	This uses the Greedy approach.*/
int get_min_distant_unmarked_node(graph* graph_obj, int *distance_to_dest,
	bool *marked) {
	//Initializing the min distance of all vertices except the source as MAX_INT.
	int min_distance = INT_MAX;
	int min_node_index;

	for (int i = 0; i &lt; graph_obj-&gt;num_vertices; i++) {
		if ((!marked[i]) &amp;&amp; (min_distance &gt;= distance_to_dest[i])) {
			min_distance = distance_to_dest[i];
			min_node_index = i;
		}
	}
	//Writing out the extracted min distant node to a file for knowing the order later.
	ofstream myfile;
	myfile.open("order_normal.txt", std::ios_base::app);
	myfile &lt;&lt; "NORMAL -- MIN NODE " &lt;&lt; min_node_index &lt;&lt; ":";

	if (shortest_order[min_node_index].size() &lt; 0) {
		for (int i = 0; i &lt; shortest_order[min_node_index].size(); i++) {
			myfile &lt;&lt; shortest_order[min_node_index][i] &lt;&lt; "-";
		}
	}

	myfile &lt;&lt; endl;
	myfile.close();
	//marking the node as already calculated.
	marked[min_node_index] = true;

	//Updating the distances for the adjacent vertices of min distant unmarked node.
	list&lt;adj_node*&gt; adj_list_for_node =
		graph_obj-&gt;adjacent_list_map[min_node_index];

	for (list&lt;adj_node*&gt;::iterator it = adj_list_for_node.begin();
		it != adj_list_for_node.end(); ++it) {
		int adj_node_index = (*it)-&gt;dest_node;
		if (marked[adj_node_index] == false) {
			if (distance_to_dest[adj_node_index]
		&gt; distance_to_dest[min_node_index] + (*it)-&gt;edge_len) {
				distance_to_dest[adj_node_index] =
					distance_to_dest[min_node_index] + (*it)-&gt;edge_len;
				shortest_order[adj_node_index].push_back(min_node_index);
			}
		}
	}
	return min_node_index;
}

/** This function calculates the minimum distant node using the fibonacci heap.*/
int get_min_distant_unmarked_node_fib_heap(graph* graph_obj,
	fibonacci_heap *heap, fibonacci_node **node_array, bool *marked) {

	int min_distance = INT_MAX;
	fibonacci_node *min_node;
	int min_node_index;
	//Extracting the min distant node.
	min_node = fib_heap_extract_min(heap);

	if (min_node != NULL) {
		min_node_index = min_node-&gt;node_index;
		//Marking that the node has reached its min distance.
		marked[min_node_index] = true;
		//Updating the distances for the adjacent vertices of min distant unmarked node.
		list&lt;adj_node*&gt; adj_list_for_node =
			graph_obj-&gt;adjacent_list_map[min_node_index];
		for (list&lt;adj_node*&gt;::iterator it = adj_list_for_node.begin();
			it != adj_list_for_node.end(); ++it) {
			int adj_node_index = (*it)-&gt;dest_node;

			if (marked[adj_node_index] == false) {
				if (node_array[adj_node_index]-&gt;key
	&gt; node_array[min_node_index]-&gt;key + (*it)-&gt;edge_len) {

					fib_heap_decrease_key(heap, node_array[adj_node_index],
						node_array[min_node_index]-&gt;key + (*it)-&gt;edge_len);
				}
			}
		}
	}
	return min_node_index;
}

/** This function runs the Depth-First-Search to find if the graph is completely connected.*/
void run_DFS(graph *my_graph, int node_index, bool *discovered) {

	discovered[node_index] = true;
	list&lt;adj_node*&gt; adj_list_for_node = my_graph-&gt;adjacent_list_map[node_index];

	for (list&lt;adj_node*&gt;::iterator it = adj_list_for_node.begin();
		it != adj_list_for_node.end(); ++it) {
		//Running recursively DFS on the child nodes.
		if (discovered[(*it)-&gt;dest_node] != true)
			run_DFS(my_graph, (*it)-&gt;dest_node, discovered);
	}
}

/** This function check if the graph is connected by running Depth-Frist-Search on the graph.*/
bool check_connected(graph *my_graph) {
	//Array showing if a node is connected the graoh.
	bool *discovered = new bool[my_graph-&gt;num_vertices];
	for (int i = 0; i &lt; my_graph-&gt;num_vertices; i++) {
		discovered[i] == false;
	}
	//Running Depth-First-Search.
	run_DFS(my_graph, 0, discovered);
	for (int i = 0; i &lt; my_graph-&gt;num_vertices; i++) {
		if (discovered[i] == false) {
			return false;
		}
	}
	return true;
}

/** Method which generated a random graph with input parameters vertices and
	density. Total edges are calculated.
	*/
graph* generate_random_graph(int vertices, int density) {
	// calculate total edges based on n and d
	// generate triplet i j and k
	int num_nodes = vertices;
	// create and initialize a graph
	graph* my_graph = create_graph(num_nodes);
	ofstream user_input_file;
	user_input_file.open("user_input.txt", std::ios_base::app);
	// a map to check if the edge generated is not duplicate
	// it is of the form (i,j) as a pair with 1 as the key.
	map&lt;pair&lt;int, int&gt;, int&gt; check_map;
	// calculate number of edges
	long double num_edges = num_nodes * (num_nodes - 1) / 2;
	num_edges = num_edges * density / 100.0;
	long double count = 0;

	user_input_file &lt;&lt; vertices &lt;&lt; "\t" &lt;&lt; num_edges &lt;&lt; endl;
	// keep generating edges until the count is reached
	while (count &lt; num_edges) {
		int start, end, weight;
		start = rand() % num_nodes;
		end = rand() % num_nodes;
		// make sure always i is less than j in (i,j)
		if (start &gt; end) {
			int temp = start;
			start = end;
			end = temp;
		}
		// create edge pair and generate weight for edge
		pair&lt;int, int&gt; edge(start, end);
		weight = (rand() % 1000) + 1;
		// if its not yet inserted into graph insert it into graph as well as the map
		if (check_map.find(edge) == check_map.end() and start != end) {
			check_map[edge] = 1;
			add_edge(my_graph, start, end, weight);
			user_input_file &lt;&lt; start &lt;&lt; "\t" &lt;&lt; end &lt;&lt; "\t" &lt;&lt; weight &lt;&lt; endl;
			count++;
		}
	}
	user_input_file.close();
	return my_graph;
}

int main(int argc, char *argv[]) {

	ofstream myfile, user_input_file;
	myfile.open("order_fib.txt", std::fstream::out | std::fstream::trunc);
	myfile.close();

	myfile.open("order_normal.txt", std::fstream::out | std::fstream::trunc);
	myfile.close();

	if (argc == 1) {
		cout &lt;&lt; "Please specify the mode and paramenters to run the program!" &lt;&lt; endl;
		return 0;
	}

	graph *my_graph;

	if (strcmp(argv[1], "-s") == 0 || strcmp(argv[1], "-f") == 0) {
		if (argv[2] != NULL) {
			cout &lt;&lt; "User Input Mode\n";
			string line, file_name = argv[2];
			char *file_name_char_array = new char[file_name.size() + 1];
			file_name_char_array[file_name.size()] = 0;
			memcpy(file_name_char_array, file_name.c_str(), file_name.size());
			int src, vertices, edges, line_count;
			int src_node, dest_node, edge_length, dij_start_index;

			// File stream of the input file in the user mode.
			ifstream myfile(file_name_char_array);

			if (myfile.is_open()) {
				line_count = 1;
				while (getline(myfile, line)) {

					if (line_count == 1) {
						istringstream(line) &gt;&gt; dij_start_index;
					}
					else if (line_count == 2) {
						istringstream(line) &gt;&gt; vertices &gt;&gt; edges;
						my_graph = create_graph(vertices);
						shortest_order = new vector&lt;int&gt;[vertices];
					}
					else {
						istringstream(line) &gt;&gt; src_node &gt;&gt; dest_node &gt;&gt; edge_length;
						//Adding edge to the graph.
						add_edge(my_graph, src_node, dest_node, edge_length);
					}
					line_count++;
				}
				myfile.close();
			}
			else {
				cout &lt;&lt; "Unable to open file";
			}
			//Calling Dijkstra in the Fibonacci scheme or normal one depending on the user arguments.
			if (strcmp(argv[1], "-s") == 0) {
				dijkstra_normal(my_graph, dij_start_index);
			}
			else {
				dijkstra_fibanocci(my_graph, dij_start_index);
			}
		}
	}
	else {
		cout &lt;&lt; "Random Mode \n";
		user_input_file.open("user_input.txt", std::fstream::out | std::fstream::trunc);
		int nodes, density, src_node, dij_start_index;
		nodes = atoi(argv[2]);
		density = atoi(argv[3]);
		dij_start_index = atoi(argv[4]);
		//Below file can be used to print the complete Graph.
		user_input_file &lt;&lt; dij_start_index &lt;&lt; endl;
		user_input_file.close();
		graph* my_graph = generate_random_graph(nodes, density);
		//Shortest_order is a vector to print down the order in which the nodes are extracted.
		shortest_order = new vector&lt;int&gt;[nodes];
		while (!check_connected(my_graph)) {
			cout &lt;&lt; "Not a Connected Graph ! So, Generating again .... \n";
			my_graph = generate_random_graph(nodes, density);
		}
		cout &lt;&lt; "\nRandom Graph generated\n";
		//Calling Normal scheme.
		dijkstra_normal(my_graph, dij_start_index);
		//Calling Fibonacci scheme.
		dijkstra_fibanocci(my_graph, dij_start_index);
	}
	cout &lt;&lt; "\n\n========== Output available in generated files ===========\n";
	return 0;
}</value>
  </data>
</root>